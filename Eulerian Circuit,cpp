#include <bits/stdc++.h>
using namespace std;


void dfs(int node, vector<int> adj[], vector<int> &vis) {
  vis[node] = 1;
  for (auto v : adj[node])
    if (!vis[v])
      dfs(v, adj, vis);
}

bool isConnected(vector<int> adj[], int n) {
  vector<int> vis(n);
  dfs(0, adj, vis);

  for (int i = 0; i < n; i++)
    if (!vis[i])
      return false;

  return true;
}

bool isEulerianCircuit(vector<vector<int>> &edges, int n) {
  vector<int> adj[n];
  for (auto i : edges)
    adj[i[0]].push_back(i[1]);

  if (!isConnected(adj, n))
    return false;

  vector<int> inDegree(n), outDegree(n);
  for (int i = 0; i < n; i++) {
    outDegree[i] = adj[i].size();
    for (auto v : adj[i])
      inDegree[v]++;
  }

  return inDegree == outDegree;
}
